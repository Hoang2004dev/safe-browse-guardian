//=================================== rules.ts
import { RULE_LIMIT } from "./constants";
import { normalizeDomain } from "./urlUtils";

/**
 * C·∫≠p nh·∫≠t danh s√°ch rule ch·∫∑n d·ª±a tr√™n blacklist.
 * S·ª≠ d·ª•ng Declarative Net Request API c·ªßa Chrome.
 */
export async function updateDynamicRules(blacklist: string[]): Promise<void> {
  // L·∫•y c√°c rule hi·ªán t·∫°i ƒë·ªÉ x√≥a
  const existingRules = await chrome.declarativeNetRequest.getDynamicRules();
  const existingRuleIds = existingRules.map((r) => r.id);

  // T·∫°o danh s√°ch rule m·ªõi
  const rules: chrome.declarativeNetRequest.Rule[] = blacklist
    .slice(0, RULE_LIMIT)
    .map((domain, idx) => ({
      id: idx + 1,
      priority: 1,
      action: {
        type: "block",
      },
      condition: {
        urlFilter: `||${normalizeDomain(domain)}`,
        resourceTypes: [
          "main_frame",
          "script",
          "sub_frame",
          "image",
          "xmlhttprequest",
        ],
      },
    }));

  // N·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n rule c·ªßa Chrome
  if (blacklist.length > RULE_LIMIT) {
    console.warn(
      `‚ö†Ô∏è Blacklist v∆∞·ª£t qu√° gi·ªõi h·∫°n ${RULE_LIMIT} rules. Ch·ªâ ${RULE_LIMIT} domain ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng.`
    );
  }

  // C·∫≠p nh·∫≠t rule m·ªõi
  await chrome.declarativeNetRequest.updateDynamicRules({
    removeRuleIds: existingRuleIds,
    addRules: rules,
  });

  console.log(`üì¶ ƒê√£ c·∫≠p nh·∫≠t ${rules.length} rules trong DNR.`);
}
